[ 제이쿼리 기본 사용법 ]

    샘플 PJ
    https://tombap8.github.io/FED211/004.jQuery%ED%95%99%EC%8A%B5/001.%EA%B8%B0%EB%B3%B8%EC%A0%9C%EC%9D%B4%EC%BF%BC%EB%A6%AC/minions.html

  ______________________________________________________________________________________________________________________

    [ 라이브러리 다운로드 ] : 제이쿼리 라이브러리는 사이트에서 다운로드함

      + 제이쿼리 라이브러리 CDN(Content Delivery Network)
        : 네트워크 라이브러리를 불러올 수 있다.

          1) 제이쿼리 홈페이지 > 다운로드 들어온다.
          2) 페이지 내려보면 "linkUsing jQuery with a CDN" 이 보인다.
          3) Other CDNs ->> "Google CDN" 클릭
          4) 3.x snippet: 아래에
             <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
             보인다. 이것을 복사한다.

          5) 해당 작업하고 있는 HTML <head> 영역 안에 
             <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
             붙혀넣는다.


          예) 구글링크 ->> 참고 Get01_jQ.html
              https://developers.google.com/speed/libraries#jquery

      ------------------------------------------------------------------------------------------------------------------

      1) https://jquery.com/
      2) Download 탭 선택

      3) jQuery 영역아래
         ★ Download the "compressed", production jQuery 3.6.0   ->> 눌러서 들어가서, "다른이름으로 저장" ->> jquery-3.6.0.min.js (88KB -> 용량 가볍다. compressed 압축된)
            Download the "uncompressed", development jQuery 3.6.0 ->>  jquery-3.6.0.js ->> "다른이름으로 링크 저장 "

         ▶ E:\MyGit\FED\004.jQuery학습\000.최신버전 -> 에 넣기

         ---------------------------------------------------------------------------------------------------------------

         ※ 다운로드시 2가지 파일있음
            1) ★ 압축버전 : compressed 버전
            2) 비압축버전 : uncompressed 버전

            -> 서버 배포시엔 용량이 1/3 정도로 가벼운 압축버전을 씀 (compressed)
            ->> 압축버전은 파일명에 min이라는 단어가 들어가 있음!
            ->> ★ jquery-3.6.0.min.js ▶ 사용해라!

         ---------------------------------------------------------------------------------------------------------------

      4) 작업하는 파일 안에 "js" 폴더 만들고, 내려받은 파일 넣는다. -> jquery-3.6.0.min.js
      5) 추가로 "js" 폴더 안에 "main.js" 새로 만든다.

      6) "index.html"의 <head>영역에, 아래와 같이 작성 
         <script src="js/jquery-3.6.0.min.js"></script>  ▶ 제이쿼리가 위에 불려와야 사용가능함!
         <script src="js/main.js"></script>

      7) "main.js" 에 
         ★ 제이쿼리 로드구역을 만든다.
            $(function(){ //// });  ▶ jQB(제이쿼리 코드 블록)

      8) 제이쿼리 로드구역 안에서 이제 코딩을 시작하면 된다.

      
  ______________________________________________________________________________________________________________________

   [ jQuery UI란 무엇인가? ]
     : jQuery UI는 제이쿼리 원본개발자들이 추가개발하여 배포한 플러그인이다!

     [ 기능종류 ]
       드래그 / 드롭, 달력, 아코디언, 이징, 컬러애니, 가속도 등
      
     [ 사용법 ]
       : jQuery UI를 "라이브러리 아래" 추가함! 
       
     [ 다운로드 ]
       https://jqueryui.com/

   ____________________________________________________________________________________________


   [ 가속도 easing 주기 ]
     : 이징기능도 jQuery UI 가 있어야함!

      이징기능
      ▶ https://jqueryui.com/easing/ 

      이징미리보기 : 구글에서 "easing" 검색
      ▶ https://easings.net/ko
         -> 여기에서 가속도 및 이름 참조하기!

   ---------------------------------------------------------------------------------------------
      
      [ 가속도 easing 하는 법 ] + jQuery UI 가져오는 법

      1) https://jqueryui.com/
      2) 메인배너영역에 있는 Download jQuery UI 1.13.0 아래에 있는
         Quick Downloads 에 있는 "Stable" 클릭하면
      3) jquery-ui-1.13.0 알집폴더가 내려받아진다.
      4) 압축풀고 보면, "jquery-ui.min.js" 해당 파일만 복사  
      5) E:\MyGit\FED\004.jQuery학습\001.기본사용법\001.제이쿼리종합\js ->> 폴더 안에 붙혀넣고
      6) 해당 작업하고 있는 HTML <head> 영역 안에
         <script src="js/jquery-3.6.0.min.js"></script>   
         <script src="js/jquery-ui.min.js"></script>  ->>> 붙혀넣는다. (jQuery UI를 "라이브러리 아래" 추가함!)

      7) 이제서야 우리는 가속도 이징을 적용해 줄 수 있다!
         https://easings.net/ko 에 들어가서,
         easing 괜찮은거보고 맘에 들면 이징명 이름 복사해서
         가속도 주고 싶은데에서 가서, 이징명 그대로 복붙!
         (이징명이 정확해야함!)

      ex)  .animate({
               right: tg.width()*1.5+"px"
            },3000,"easeInQuint")

            ->> "easeInQuint" 줌!
                 easeOutBounce 등등 다른거 줘도됨~

  ______________________________________________________________________________________________________________________

  1. 제이쿼리는 무엇인가?
     - 자바스크립트로 만든 함수 집합체 
       ->> "JS 라이브러리"

     - 라이브러리? 도서관? 
       ->> 분류체계로 지식을 쉽게 찾을 수 있도록 제공하는 서비스
       ->> JS 라이브러리는 JS를 쉽게 쓸 수 있도록 "함수를 제공"하는 서비스

     - 이점은? 
       ->> 소스코드가 직관적이고, 간단하고 쉽고 짧아진다!
       ->> 제이쿼리는 말하는대로 생각한대로 구현된다!

  ______________________________________________________________________________________________________________________

  2. 제이쿼리 함수 호출법

    ★★★
    ->> 제이쿼리는 함수 호출 전 반드시 제이쿼리 "라이브러리파일을 먼저 불러"와야 한다. (순서가 매우매우 중요!)

    ->> 제이쿼리는 선언적함수가 아니고, "할당형 익명함수"다! (익명함수 -> 만나서 순간 메모리에 할당된다.)
        따라서 코드가 실행될 때 메모리에 로드된다.

        -> jquery-3.6.0.js 파일의 맨 상단을 보면, function( global, factory ) 시작을 하는데, 익명함수로 할당된다는 것.
           html에서 코드 불러올때 해당 파일을 먼저 불러들이지않으면, $이게 뭔데? 라는 브라우저 콘솔에 찍히게 된다.

        ->> <script src="js/jquery-3.6.0.min.js"></script>  ▶ 제이쿼리가 위에 불려와야 사용가능함!
            <script src="js/main.js"></script>
     -------------------------------------------------------------------------------------------------------------------

    ★★★★★★
    ->> 계속 부를거 같으면, 대상선정해서 변수에 할당해라

        ★ let tit = $(".tit");  ->> 한번 저장해놓고 계속 사용한다. (경제적인 코드)
           tit.mouseover -> 이렇게 쓸 수 있다. 
           tit.mouseout

        ▶ $(".tit").mouseover  ->> 이렇게 $(".tit") 쓰면 쓸때마다 document. 한거와 같이 메모리를 많이 쓴다.
           $(".tit").mouseout

     -------------------------------------------------------------------------------------------------------------------

     1) 함수명 - jQuery() : 대소문자 구분
        -> 제이쿼리 이름의 기원은 j는 JS를 뜻함
        -> query 는 질의라는 뜻. 기술적인 질문 - 함수로 부터 리턴값이 있는 질문이라는 뜻. (함수를 물어보면 답을 얻을 수 있음) 

     2) ★ 함수명 단축 : $()
           jQuery() ->> $()

     3) ★ ★ ★ 로드구역 설정 (밑에 있는 html이 다 그려진 다음 실행 - 코드가 밑에 있던 위에 있건 안전하다.)
        JS는
        document.addEventListener("DOMContentLoaded",function(){//구현부//});

        ★ ★ ★ 제이쿼리는
                 $(function(){//구현부//});

        좀더 축약하면
        $(()=>{//구현부//});

        · 화살표함수 쓴거임 -> this 쓰려면, event.currentTarget 써야함

  ______________________________________________________________________________________________________________________

  3. 요소 선택하기

     $(//선택자//)
     -> 선택자는 CSS 선택자, 따옴표로 싸는 "문자형"

     예)
     $(".my li")

  ______________________________________________________________________________________________________________________

  4. 요소 선택 세부옵션 
     탐색용 : 확장성
     ★ 변수로 큰거를 변수에 할당하고, 그 변수를 잡아서 탐색할 수 있게 한다.

     (여러개중에서 돌아다니면서, 탐색할 수 있다.) 
     -> 이게 뭔소리냐면?
     ->> 주어는 하나! 뒤에 메서드 체인! (계속 붙여서 코딩할 수 있게 해줬다!)

        ex) btns.hide().first().show()
            : 버튼들을 .숨겨() .첫번째()는 .보여()
            : () -> 함수호출(자바스크립트 문법) / hide() -> hide함수를 호출 (내가 만든게 아니고, 제이쿼리꺼 함수호출한거임)

            ★ 여기서 btns는 변수에 할당함
               let btns = $(".btns button");

     -------------------------------------------------------------------------------------------------------------------

     1) ★ 직계자식 선택
           children(선택자)

           $(//선택자//).children(//선택자//)   
           -> 칠드런 쓴다!

           예)
           $("#hay").children("div") -> #hay밑에 직계자식 div 전부 찾아!

           비교) $("#hay>div") -> 위와 같음!

     -------------------------------------------------------------------------------------------------------------------

     2) ★ 자손 선택
           find(선택자)
           -> 띄어쓰기하고 찾는것처럼 find~

           $(//선택자//).find(//선택자//)
           -> 자손선택할때 띄어쓰는데 그 아래 다 찾아주니까 find 쓴다.

           예)
           $(".sum").find("span") -> sum 안에 있는 span 전부 찾아!

     -------------------------------------------------------------------------------------------------------------------

     3) ★ 몇번째 자식요소
           eq(순번)

           $(//선택자//).eq(순번)  :  순번은 0부터
           ->> eq() -> sequence에서 나온 말(시퀀스)

           예)
           $(".my li").eq(3)  ->  4번째 li선택

     -------------------------------------------------------------------------------------------------------------------

     4) ★ 첫번째 자식 
           .first()

           $(//선택자//).first()

           예)
           $("li").first() -> 첫번째 li

  ______________________________________________________________________________________________________________________

  5. 이벤트 메서드
     1) click(함수) - 클릭시 함수(function) 실행

        예)
        .click(function(){////});


     2) mouseover(함수) - 오버시 함수실행
     3) mouseout(함수) - 아웃시 함수실행

  ______________________________________________________________________________________________________________________

  6. 기능 메서드 - ()가 있으면 함수호출(자바스크립트 문법) / 내가 만든게 아니고, 제이쿼리꺼 이미 만들어져 있는, 함수호출한거임(jquery-3.6.0.min.js)

     1) hide() 
        -> 선택요소를 display:none 으로 변경됨!
        -> 확장형 : hide(시간,이징,함수) : 시간만 써도, 에니메이션이 됨(애니메이션이 가능하다) 
           ex) hide(5000)

     -------------------------------------------------------------------------------------------------------------------

     2) show()
        -> 선택요소를 원래 display 로 변경함!
        -> 확장형 : show(시간,이징,함수) : 시간만 써도, 에니메이션이 됨(애니메이션이 가능하다)
           ex) show(2000)

     -------------------------------------------------------------------------------------------------------------------

     3) animate()
        -> animate({CSS설정},시간,이징,함수) 
            
            - CSS 설정에 따라, 애니메이션 연출하는 메서드

            - CSS 값은 {속성명:값, 속성명:값,..} 
              ->> "객체"형식으로 값을 할당하여 사용한다!

            - 시간 : 1/1000초 (단위없음) 
              ->> 1000이라고 쓰면 1초다!
              ->> 안쓰면 400 (0.4초) - 기본값

            - 이징 : 가속도(jQuery UI를 가져와야함! -> 맨위에 설명있음)
            - 함수 : 애니후 실행코드 함수 (콜백함수)
                     ->> (뒤에서 호출한다해서 "콜백함수")
                     : 익명함수를 많이 사용함!
      
            ex) 기본적으로는 -> .animate({left:"70%"},2000)

                완전혼합하면
                ▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼
                 .animate({
                       right: tg.width()*1.5+"px"
                 },3000,"easeOutBounce",function(){
                       mi.find("img").attr("src","images/mz1.png");
                       msg.html("나도좀비!;;;<br>어서 치료주사를!");
                       btns.eq(5).fadeIn(200);
                 });
                ▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲
            

            ※ 주의사항 : 애니메이션을 할 대상에 트랜지션(변화과정을 보여줘라 : 속시이지) 설정하지 말아야 한다!
                         만약 트랜지션이 있으면 오작동이 일어남!!!
                         $(".inj").animate({
                              transition: ".5s ease-out 1s", 
                         XXXXXXXXXXXXXXXXX 안된다!!! XXXXXXXXXXXXXXXXXXXX
            ------------------------------------------------------------------------             
            ※ 주의 : transform은 animate 지원불가!
                      ->> css의 transition설정으로 애니메이션 할것!
                      ex) 
                           $(".inj").css({
                              transform:"rotate(-150deg),
                              transition: ".5s ease-out 1s",
                              zIndex: "9999" 
                           });

                           위에 코드를 아래처럼 적으면, 주사기 액션 자체가 안된다.
                           $(".inj").animate({
                              transform:"rotate(-150deg),
                           },500);

     -------------------------------------------------------------------------------------------------------------------

     4) css()
        : CSS속성을 변경하는 메서드 (style 쓸 필요 없음)

        ★ css({속성명:값, 속성명:값,...})

           - 속성명으로 변수형, 문자형 모두 사용가능
             ★ 변수형 : borderRadius (변수형을 더 많이 씀) (자바스크립트처럼 대소문자 구분해야함!)
                문자형 : "border-radius"

     -------------------------------------------------------------------------------------------------------------------

     5) each(function(idx,ele){구현부})  
        : 선택요소를 순서대로 돌면서, 구현부를 실행하는 메서드
          ->> 선택요소 여러개이면, for문을 돌듯이 모두 셋팅됨!

          ->> (idx,ele) : 무조건 2개를 써야한다. (=변수의 순서중요!)
                        : idx = 순번, ele = 나자신 (변수명 변경가능하나 이렇게 쓰는것을 추천)

        
          - each : 각각의 뜻

          - idx -> "index" 에서 나온말로 변수명 사용 (인덱스 줄여씀)
            : idx 전달변수는 순번이 전달됨(0부터) 

          - ele -> "element" 에서 나온말로 변수명 사용(엘러먼트 요소자신 줄여씀)
            : ele 전달변수는 요소자신(this 키워드와 동일) 


          ->> 이 메서드를 사용하면, for문을 안써도 됨!
          ->> 선택요소 여러개이면, for문을 돌듯이 모두 셋팅됨!

     -------------------------------------------------------------------------------------------------------------------

     6) text()
        : 글자데이터를 읽거나 넣는 메서드

        ★ $(선택요소).text() 
           : 선택요소의 글자데이터 읽어옴

        ★ $(선택요소).text(내용) 
           : 선택요소의 글자데이터 넣기

           ex) bd.each(function(idx,ele){
                    $(ele).text(idx);
               });

               ★ 여기서 bd는 변수에 할당함
                  let bd = $(".building li");

               ->> 빌딩 안에 있는 -> 각각의 순서대로 돌건데 -> 각각의 요소에 순번대로 텍스트로 써져 라는 뜻
              
               -> text넣는데, idx인 순번이 글자로 들어감
                   · $(ele) === $(this) : ele자리에 this써도 됨 -> ele 전달변수는 요소자신(this 키워드와 동일) 

     -------------------------------------------------------------------------------------------------------------------

     7) html()
        : html 태그를 읽거나 넣는 메서드 (덮어써짐)

        ★ $(선택요소).html() 
           : 선택요소의 태그를 읽어옴

        ★ $(선택요소).html(내용)
           : 선택요소의 태그 넣기

           ex)  if(idx===9 || idx===7)
                    $(ele).html('<img src="images/mz1.png" alt"좀비" class="mz">');
                
                ->> 기존에 숫자 넣어진거 안보이고, 이미지만 보임

     -------------------------------------------------------------------------------------------------------------------

     8) append() 
        append(태그 or 기존요소)
        : 새로운 요소를 "맨뒤" 에 추가하거나, 기존요소를 맨뒤로 이동하는 메서드
          
        ->> 포인트 : 기존요소가 살아있다!!!

     -------------------------------------------------------------------------------------------------------------------

     9) prepend()
        prepend(태그 or 기존요소)

        : 새로운 요소를 "맨앞" 에 추가하거나, 기존요소를 맨앞으로 이동하는 메서드

        ->> 포인트 : 기존요소가 살아있다!!!

     -------------------------------------------------------------------------------------------------------------------

     10) fadeIn()
         : opacity가 먼저 된다음 -> (끝나고난 다음) 디스플레이 처리된다.

         : opacity 값을 1로 변경하며, 서서히 "나타남"
           특징 -> display:none 인 상태에서 보이는 상태로 변경함!
         
           fadeIn(시간,이징,함수)
           - 시간은 1/1000초
           - 이징은 가속도
           - 함수는 콜백함수(애니후 실행) : 뒤에서 실행 (애니메이션 끝나고 실행됨)

     -------------------------------------------------------------------------------------------------------------------

     11) fadeOut()
         : opacity가 먼저 된다음 -> (끝나고난 다음) 디스플레이 처리된다.

         : opacity 값을 0으로 변경하며, 서서히 "사라짐"
           특징 -> display:none 으로 끝남! (opacity처럼 처리한게 아니라 완전히 사라짐 안만져짐)
         
           fadeOut(시간,이징,함수)
           - 시간은 1/1000초
           - 이징은 가속도
           - 함수는 콜백함수(애니후 실행) : 뒤에서 실행 (애니메이션 끝나고 실행됨)

     -------------------------------------------------------------------------------------------------------------------

     12) slideUp()
         : height 값을 0으로 만들고, 넘치는 자식요소 숨기기를 자동처리함
           특징 -> 동작후 display:none 상태로 끝남

           slideUp(시간,이징,함수)
           - 시간은 1/1000초
           - 이징은 가속도
           - 함수는 콜백함수(애니후 실행) : 뒤에서 실행 (애니메이션 끝나고 실행됨)

     -------------------------------------------------------------------------------------------------------------------

     13) slideDown()
         : height 값을 원래대로 만들고, 넘치는 자식요소 숨기기를 자동처리함
           특징 -> 동작후 display:none 상태로 시작하여 원래상태로 보임
                -> 높이값은 자동으로 원상복귀 해줌!

           slideDown(시간,이징,함수)
           - 시간은 1/1000초
           - 이징은 가속도
           - 함수는 콜백함수(애니후 실행) : 뒤에서 실행 (애니메이션 끝나고 실행됨)

     -------------------------------------------------------------------------------------------------------------------

     14) delay()
         : 애니메이션 메서드 앞에서 시간을 지연하는 메서드
           ▷ .delay -> 쓰려면 뒤에 -> (시간,이징,함수) 애니메이션 메서드를 써야한다.
              ex) fadeIn(), fadeOut() ... (시간,이징,함수)를 설명에 적혀있으면 된다!
           
         - delay(시간)
           : 시간은 1/1000초
           
           ※ 주의사항 : 애니메이션 되는 메서드가 아니면 효과가 없다!
                        (시간,이징,함수) 들어간 것들은 전부 애니메이션 되는 애들임!

                         .delay(500).fadeIn(200); -> 됨!
                         .delay(700).slideDown(400); -> 됨!

           예)
           $(선택자).delay(2000).css({left:"100px"}) -> 지연안됨! (왼쪽으로 100px설정해라는 뜻이므로, 애니메이션이 아니기에 안됨.)
           $(선택자).delay(2000).animate({left:"100px"},400) -> OK! (2초뒤에 실행해, 애니메이트인 왼쪽으로 0.4동안 100px 이동해.)

           ex)
           msg.empty()
           .fadeIn(200,()=>{msg.text("무.");})
           .delay(1500).fadeIn(200,()=>{msg.text("무.서.");}) 
           .delay(1500).fadeIn(200,()=>{msg.text("무.서.워...");});

           ▷ .delay 쓰려고, fadeIn씀(또 나오게하고 한 설정함)
           ▷ .delay -> 쓰려면 뒤에 -> (시간,이징,함수) 애니메이션 메서드를 써야한다. 
              ex) fadeIn(), fadeOut() ... (시간,이징,함수)를 설명에 적혀있으면 된다!

           ▶ msg요소 뒤에 delay와 fadeIn 애니메이션을 이어서 하면,
              순서대로 msg에 애니메이션이 쌓여서 하나씩 실행된다!
              (이것을 애니메이션 큐에 쌓인다고 함!) 

           ▶ 큐(Queue)는 브라우저 프로그램 실행 메모리 저장소 
              큐는 애니메이션 전용 메모리 저장소
           
     -------------------------------------------------------------------------------------------------------------------

     15) empty()
         : 선택요소 텍스트 데이터 "지우기" 전용

         예)
         msg.empty() 
         .fadeIn(200,()=>{msg.text("무.");})
         .delay(1500).fadeIn(200,()=>{msg.text("무.서.");})
         .delay(1500).fadeIn(200,()=>{msg.text("무.서.워...");});

         여기서, .empty() 를 주지 않으면
         기존의 설정되어있던 텍스트가 보여지고, 다음으로 .fadeIn 설정한 텍스트가 보임
         기존의 텍스트를 안보이게 하려고 설정한거임.

         msg.text("") === msg.empty()  같은 뜻
         msg.text("") 은 빈내용을 덮어쓴거고, 사실 empty는 지우기 전용임

     -------------------------------------------------------------------------------------------------------------------

      16) attr() 
          : attribute 에서 줄임말
          
          - attr(속성명,값) : 선택요소의 속성바꾸기
            -> JS의 setAttribute(속성명,값) 비교

          - attr(속성명) : 선택요소의 속성값 가져오기
            -> JS의 setAttribute(속성명) 비교

           ex) 
           mi.find("img").attr("src","images/mz1.png");
           -> src 이미지 소스를 바꿈
           ->> html에 가서 보면 
               <div class="mi">
                  <img src="images/m1.png" alt="미니언즈">
               이 해당 이미지가
               m1.png ->>> mz1.png 바꿈!

     -------------------------------------------------------------------------------------------------------------------

       17) remove()
           : 선택요소를 제거하는 메서드

     -------------------------------------------------------------------------------------------------------------------

       18) addClass(클래스명)
           : 선택요소에 클래스 넣기

            ▶ 보통 css에서 작업한걸 여기서 끼어서 쓴다.

               ex)
               main.css에서 
               .tit.on{
                  top : 50%; 
                  transform: translateX(-50%) rotate(45deg);
               }
               
               ->> 자! 여기서 눈여겨 볼게 있다.!!! 
                   왜? .tit.on 이라고 붙혀썼을까?
                   그 이유는!!! .tit이고 동시에 .on이라는 것 !!!

               ->> ★★★ 같은 한요소에 여러개가 있을때 붙혀서 표기한다. 예시) div#my

               위에서 적은 css에서 적은 새롭게 -> ".on클래스 생성" 한걸 이제 브라우저에 눈에 보이게 하자!
               main.js로 와서
               ▶ tit.addClass("on");  
                  이걸 입력하면, tit에 css에서 설정한 "on"클래스 들어갔다.

               + 추가로 더 집어넣고 싶으면
                 .tit.on2{top : 95%; transform: translateX(-50%) rotate(6deg);} ->> css 클래스 신규로 주고

               + 추가로 넣은 on2가 먼저 설정한 on보다 늦게 나와야 하니까 (main.js와서 설정)
                 setTimeout(() => { 
                        tit.addClass("on2");
                 }, 3000);



       19) removeClass(클래스명)
           : 선택요소에 클래스 제거하기 (클래스명 안쓰면 모든 클래스를 지움! → 선택요소에 담겨있는것들이 다 지워짐)

       20) toggleClass(클래스명)
           : 선택요소에 해당클래스가 "있으면 ▶ 빼고" / "없으면 ▶ 넣기"


       비교) 
       JS 기본 내장함수 (자바스크립트는 자바스크립트만 쓰고, 제이쿼리는 제이쿼리써야한다. 
                        ★★★★★★ 선택자, 메서드 혼용안된다. 오류난다.)
       · classList.add(클래스명)
       · classList.remove(클래스명)
       · classList.toggle(클래스명)


  ______________________________________________________________________________________________________________________


  7. 수치 리턴 메서드 
     : 선택요소의 위치, 크기 구하기

     1) $(선택요소).offset() : 선택요소의 설정값 읽어오기
        - $(선택요소).offset().top : top값 (선택요소가 "맨위"에서부터, 얼마나 떨어져있는지 수치값 가져오기)
        - $(선택요소).offset().left : left값 (선택요소가 "왼쪽"에서부터, 얼마나 떨어져있는지 수치값 가져오기)

          예)
          let bd = $(".building li"); -> class="building" 의 모든 li
          let tg = bd.eq(7); -> li 중 6번째
          tg.offset().top; -> li 중 6번째가 맨위에서부터(기준) 얼마나 떨어져있는지에 대한 값 가져오기

     -------------------------------------------------------------------------------------------------------------------

     2) $(선택요소).width()
        : 선택요소의 width값 읽어오기
        : 선택요소의 가로크기 구하기
          -> 단위없는 px값

          ex)
          let win5 = $(window).width() * 0.05;
          console.log(win5)
          -> 콘솔로 찍어서 보면 숫자만 나오는데, px이 안붙어져서 숫자만 보인다.
          ->> 단위없는 px값

          ▶ 해당 코드 참고 : 004.jQuery학습\001.기본사용법\001.제이쿼리종합\js\"main.js"

     -------------------------------------------------------------------------------------------------------------------

     3) $(선택요소).height()
        : 선택요소의 height값 읽어오기
        : 선택요소의 세로크기 구하기
          -> 단위없는 px값

  ______________________________________________________________________________________________________________________



