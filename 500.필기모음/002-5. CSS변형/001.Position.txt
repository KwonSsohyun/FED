[ Position ]

[ CSS의 포지션은 뭐지? ]
  - 위치를 배치하기 위한 효과적인 코딩법을 제공하는 속성


[ Position 5가지 ]
  - position: static;
  - position: relative;
  - position: absolute;
  - position: fixed;
  - position: sticky;

_______________________________________________________________________________________________________ 

    [ 1. static 포지션 ]
    
         - 설정하지 않아도 기본값
         - ★ 위치이동값 (top,left,right,bottom) 속성이 적용되지 않는다.
         - 위치 이동을 하려면 margin을 사용
           : 마진으로 위치를 이동시키면 아래 또는 옆에 있는 요소가 영향을 받는다!!!
             (책상 밀었던니 뒷 책상 같이 밀리는거)
             (사이트 위에 공간을 줬더니 아래있는 애들은 밀려서 내려간다.)


         [ 위치이동 속성 ]
         - 선택요소의 위치를 이동하기 위한 속성
         - 포지션에 따라 다르게 적용된다!
         - 종류: 4가지를 써도 안먹는다.
                (top, bottom, left, right)
        
                
         - ★ 겹쳐지지 않는다.  
         - 놓인상태 그대로 놓여있는 상태
         - 정적인 상태       
        
         - ★ 위치이동이 안먹힌다 -> 미디어쿼리할때 위치이동을 하면 안될때 다시 원상복구할때 쓸 수 있다.

_______________________________________________________________________________________________________ 
  

    [ 2. relative 포지션 ]

         - 렐러티브!(상대적인) 라고 읽어줘요!
         - 이때까지는 아무 변화가 없다. -> 위치이동값주면 변화가 있다. 근데 겹쳐보인다.

        1. ★ 위치이동속성이 적용된다! (top,left,right,bottom)

        2. 위치이동의 기준은 원래 있던 위치임!
           (그래서 상대적인 즉, relative라는 단어사용)

        3. ★ 이동시에 '다른 요소에 영향이 없이 겹쳐질 수 있다.'
            원래 있던 터가 그대로 있다. (집주인은 나가도 집은 그대로)

        4. ★ 원래 자신이 있던 위치는 그대로 보존된다!!! 
            -> 원래 있던 위치에서 꼭지점으로 이동하고, 원래 있던 자리는 잡고있기 때문에 다른게 영향이 없는거다.
            -> 살짝 나갔다가 다시 들어오게 하고 싶을 때 많이 쓴다.
               (★ 의미 : 기존위치가 보존되기 때문에 위치를 이동시켜도 본래 디자인은 망가져 보이지 않는다!)

        5. 위치값 설정시 2가지를 기준으로만 셋팅해야한다. (한가지도 가능 top or bottom / right or left)
            - 위아래 중 하나, 좌우 중 하나 (★ 어느 꼭지점을 기준으로 움직일 것이냐라는 기준을 잡아줄 것)
            1) top, left
            2) top, right
            3) bottom, left
            4) bottom, right
            - 값 수치의 양수는 내부방향 (+) (원래 있어야 하는 터에서 박스 '안'으로 향하는 방향)
                    음수는 외부방향 (-) (원래 있어야 하는 터에서 박스 '밖'으로 향하는 방향)
            
            - top : top이니까 윗쪽기준선으로 스테이지 (+)내부방향 안쪽으로 들어간다. (-)나가는방향 위쪽방향으로 올라간다.
            - left : (+)내부방향 (-)나가는방향
            - right : (+)내부방향 (-)나가는방향
            - bottom : (+)내부방향 (-)나가는방향
            - ★ top,left,right,bottom 적용되는 것 중 값이 '0'이면 원래 내 위치


        6. ★ 마진은 그대로 적용된다!
            (다른 static 요소에 영향을 준다!)
            -> 원래위치에서 마진으로 밀고 있는 것과 같다! (마진을 준 위치에서 위에 위치값 이동)
            -> 마진을 주면 원래 다 같이 아래있는 것도 같이 밀리는데,
            위치이동값을 주면, 그 마진을 줘서 밀린 상태에서 꼭지점 기준 해당 방향으로 이때 다른요소는 밀리지 않고 이동된다.

        7. ★ relative는 위치이동값을 사용하지 않으면
            static과 똑같은 특성을 가진다. (top,left,right,bottom)이 static은 안되기 때문에.


        8. ★ relative는 겹쳐질 수 있으므로
            위아래 위치관계가 성립된다!
            기본적인 위아래 위치관계는 아래와 같다.

            1) static보다 항상 위
            -> static보다 아래로 가는 방법은?
                z-index를 음수로 준다!!!

            2) static이 아닌 포지션인 경우 나중에 그려진 요소가 위!
            -> 스탭틱은 겹쳐지는 속성이 없기때문에 스탭틱을 제외한 나머지 포지션을 줬을때
                "순서대로 코딩했다고 치면, 나중에 친게 맨 위로 온다.(relative,absolute,fixed,sticky,z-index)"
                (손바닥 놓고 손등 때리기!!! -> 맨 마지막 쌓는게 맨 상단에 배치되기 때문)
            
            -> 순서를 바꾸고 싶다? : 이럴때 'z-index'를 쓴다. (스탭틱은 겹쳐지는 속성이 없기때문에 줘도 안먹는다!)
                - static은 계속 아래 깔려있다. 포지션도 없고, 겹쳐질 수도 없기 때문에. 자기네들끼리 위치관계만 비교
                
            3) z-index 속성으로 숫자가 크면 위!
            -> 같이 있는 건 '0'층
            -> 숫자가 높으면 한 층 위에 있는 것
                9999를 줬다고 9999개의 층이 생겼다는 건 아니고, 숫자를 비교했을때 숫자가 높은게 위


    ---------------------------------------------------------------------------------------------------


        [ z-index란? ]

          - 겹치는 포지션을 주는 경우 위치순서를 정하여 디스플레이를 변경하는 속성

          - z는 화면방향의 z축을 의미하며 기본값은 '0'이다! 
            이는 같은 층에 있다는 의미!

          -> 포지션이 ststic인 경우 
             즉 아무것도 포지션을 안준 경우 z-index가 적용안된다!
          -> 왜? 스스로 겹쳐질 수 없으므로!

          -> 결론적으로 포지션이 있는 경우에만 사용할 수 있다!

          ★ 사용법
             z-index: 숫자
            - 숫자의 의미는 단순 위치 비교개념
            - 숫자가 높은 것이 위에 온다!
            - static요소는 무조건 밑에 깔린다!
            - 마이너스 숫자를 주면 static보다 아래로!
            - 숫자가 같을 경우 나중 것이 위에옴!

            ※ 유의사항
            -> z-index 비교시에 같은 형제레벨에 있어야 비교된다!!!!
            - 만약 자손요소의 z-index를 아무리 높이 줘도
              부모요소의 다른 형제요소가 z-index가 높으면 올라갈 수 없다.

            - 예) 부모안에 있는 자식에 div를 주고 포지션 주고 z인덱스를 아무리 줘도
                  부모와 다른 부모 사이에서 아무리 안올라온다.

                  -> 그 이유는 같은 레벨에서 비교해야하는데, 그 하위레벨에서 아무리 z인덱스를 줘도 안올라온다.
                     꼭 겹쳐져있는 그 것과 아래 겹쳐져있는 이 두개의 같은 레벨에서 비교해 줘야 한다.

                  -> 혹은 z인덱스가 같은 레벨에서 없어야 안에 있는 z인덱스가 올라올 수 있다.  

    ---------------------------------------------------------------------------------------------------            

        9. 자식요소에 대한 다음의 중요한 특징이 있다.
            - 자식요소(혹은 자손요소)의 포지션이 
              absolute일때 자기자신에게 아무런 포지션이 없는 상태라면...
            
            -> 자기가 부모역할을 해야할 때
               설정하는 포지션으로 relative가 많이 사용된다!
               (이유: relative를 주고 나면 아무런 외형적 변화가 없기 때문에!!!)     

_______________________________________________________________________________________________________          


    [ 3. absolute 포지션 ]

         1. absolute 포지션은 위치 이동값을 쓰기 '전과 / 후'로 나누어 볼 수 있다.
            
            1) 위치 이동값을 쓰지 않은 경우 (X)
               - 자기보다 위에 있는 요소를 존중하여 그 아래에 위치한다! (젠틀앱솔루트!)
               - 자기보다 아래쪽에 있는 요소는 앱솔루트를 인식하지 못하여 같은 자리에 올라옴!
               - 어떤 요소 내부에 있는 자식요소가 앱솔루트일 경우
                 그 부모박스 위치에 가만히 있는다!(젠틀앱솔루트!)
               - 앱솔루트끼리는 서로 겹친다.

            2) 위치 이동값을 사용한 경우 (O)
               - 위치이동값을 사용한 부분에 대하여서만!!!(top,left,right,bottom)
                 앱솔루트가 위치를 잡을 때 부모요소는....???
                    
                 ★ static이 아닌 포지션을 가진요소가 부모다!!!
                    -> static이 아닌 포지션이란?
                       : relative / absolute / fixed

                 -> 위치이동값을 사용하지 않는 부분은 젠틀하다!
                    
                 -> 부모자격이 있는 부모요소들 중 가장 가까운 것이 부모가 된다.
                    나를 싸고 있는 것중에 가장 가까운 것.

                 -> 기준의 시작을 맞출것으로 부모로 잡고 -> relative 에 아무변화가 없기에 보통 부모로 준다.
                    

               [ 만약 부모자격이 모두 없으면 보이는 화면을 기준한다! ]
                 -> 보이는 화면은 body를 말하는 것이 아니다!!!

                 -> 보이는 브라우저 화면 즉, window 화면이다!
                    (스크롤이 생겨도 스크롤 위쪽화면을 말함!!!)


         2. ★ 앱솔루트에 '가로, 세로' 크기를 주면?
            (width,Height 안 주면(X), 컨텐츠만큼만 영역잡음)
            (width,Height 주면(O), 설정한 값 해당 사이즈만큼 보이게 조정이 가능)

            일반적으로는 block요소 이므로 
            auto로써 부모요소의 끝까지 차지하지만 
            앱솔루트는 내용만큼만 그 크기를 자동으로 설정한다!!! (가로,세로 X안주면X)
            -> 판타롱스타킹!!!   


         3. '인라인요소'에 앱솔루트를 준 경우
            자동으로 display가 block으로 설정됨!!!
            -> 일반적으로 앱솔루트는 block이다!!!

    
         4. ★ 앱솔루트에 '마진'을 설정할 경우
            설정이 반영되는 경우는 위치설정과 같은 방향의 마진이 적용된다!!!

            예) top쓰면 부모 찾으니까 - 미세조정할때 ! 
                top을 적용했으면 margin-top
                left을 적용했으면 margin-left
                bottom을 적용했으면 margin-bottom
                right을 적용했으면 margin-right

            -> 앱솔루트의 마진은 위치이동 후
               미세조정을 개별요소가 필요로 할때 사용할 수 있음

            -> 위치이동값이 설정되지 않았을 때 
               기본 위치가 "top, left"이므로
               ★ margin-top / margin-left 만 적용된다!
 

         5. 위치이동값 초기화
            - 값으로 auto를 쓰면 된다!
            - top: auto, left:auto, right:auto, bottom:auto
            - 기존값을 해제 할때도 auto를 쓴다!
              예) 기존에 left:50px로 잡았다가
                  right기준으로 값을 변경하려고 할때
                  그대로 right값만 설정하면 적용이 안되므로
                  left:auto로 초기화하고 right:50px 로 변경

_______________________________________________________________________________________________________    


    [ 4. fixed 포지션 ]
               
         1. 위치 설정값을 쓰지 않을 때
            - 자신보다 위에 있는 static한 요소 아래에
              그대로 있다가 스크롤시 그 자리를 화면에서 지키고 움직이지 않는다!
            -> 젠틀앱솔루트와 유사! 젠틀픽스드!


         2. 위치 이동값을 썼을 때
            - 부모를 기준하여 위치를 잡는다!
            - 부모가 누구???
              ★ 보이는 화면 즉 window

            -> 보이는 화면에서 사라지지 않게 하고자 할때
               사용하는 포지션!!!

            -> 부모를 제외한 모든 다른 특성은
               앱솔루트와 거의 같다!!!


         3. 아무리 부모요소가 여러개일지라도
            자식요소 중 fixed를 주면 화면을 기준함! (나의 부모는 국가다.)
            (자기 혼자서 보이는 화면을 기준으로 함)


         4. 부모박스가 fixed이면 그 자식요소들은 모두 화면에 고정된다!!! 
            (엄빠차타고 다같이 부산간다.) (다 같이 따라간다.)

         5. 화면바깥으로 숨겼다가 보이게 할 때
            fixed를 이용한다!

         6. z-index도 포지션이 있는 경우 숫자로 비교!

_______________________________________________________________________________________________________   

    [ 5. sticky 포지션 ]

         1. 위치값 설정에 따라 보이는 화면에 고정되는 포지션

         2. 원리 : 처음에는 relative하게 (위치값 적용됨)
                   가만히 있다가 자신의 위치값이
                   스크롤 위치보다 위로 올라갈 때(화면에서 사라질떄)
                   설정된 top값보다 크면 fixed하게 고정된다!

                   -> 스크롤 위치 고정값은 top에 설정한다!
                      (top설정안하면 스티키 안된다.)

                   -> top값을 설정하지 않으면???
                      relative하게 그대로 있음         

