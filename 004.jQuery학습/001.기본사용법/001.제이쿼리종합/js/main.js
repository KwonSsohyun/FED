// 제이쿼리 기본 JS - main.js

////////////////////////////// 제이쿼리 로드구역 ////////////////////////////////
$(function(){

    /// 타이틀 오버시 글자색, 배경색 변경
    //  대상 : .tit (여러번 쓸거면 변수에 할당)
    let tit = $(".tit");

    //  mouseover() 메서드 - 오버시 함수연결
    tit.mouseover(function(){

        // 변경대상 : .tit -> 나 자신 this 키워드
        $(this).css({
            color: "red",
            background: "yellow"
        });///// css /////

    });/////// mouseover 시 ///////////////

    // 마우스 아웃시 원상복귀
    // mouseout(함수) - 마우스 아웃시 함수연결
    tit.mouseout(function(){

        // 변경대상 : .tit -> 나 자신 this 키워드
        $(this).css({
            color: "yellow",
            background: "pink"
        });///// css /////

    });/////// mouseout 시 ///////////////


    ////////////////////////////////////////////////////
    // 1. 대상선정 변수할당 //////////////////////////////
    ////////////////////////////////////////////////////

    // 대상 1 : 버튼 - btns button
    let btns = $(".btns button");

    // 대상 2 : 미니언즈 - .mi
    let mi = $(".mi");

    // 대상 3 : 빌딩 - .building li
    let bd = $(".building li");

    // 대상 4 : 메시지 - .msg
    let msg = $(".msg");


    ////////////////////////////////////////////////////
    // 2. 초기화 셋팅 ///////////////////////////////////
    ////////////////////////////////////////////////////

    // 2-1. 모든 버튼 숨기고, 첫번째만 보이게 하기
    btns.hide().first().show() /* btns.hide(); // hide : 숨긴다. */
    // 버튼들을 .숨겨() . 첫번째()는 . 보여()
    // 주어는 하나! 뒤에 메서드 체인! (계속 붙여서 코딩할 수 있게 해준!)

    /* ()->함수 / hide() -> hide함수를 만든거임 */

    // 2-2. 모든 빌딩 li를 순서대로 돌면서 순번넣기 + 좀비넣기
    /* 
        each(function(idx,ele){구현부})
        -> 선택요소를 순서대로 돌면서 구현부를 실행하는 메서드
        -> each : 각각의 뜻

        idx -> index 에서 나온말로 변수명 사용(인덱스 줄여씀)
        -> idx 전달변수는 순번이 전달됨(0부터) 

        ele -> element 에서 나온말로 변수명 사용(엘러먼트 요소자신 줄여씀)
        -> ele 전달변수는 요소자신(this 키워드와 동일) 

        - 참고로 idx, ele변수명은 변경가능. 변수의 순서중요! 
        
        - 이 메서드를 사용하면 for문을 안써도 됨!
    */
    bd.each(function(idx,ele){

        // console.log(idx);

        // 1. 각 li요소에 글자 넣기(순번)
        $(ele).text(idx); /* text를 썼기에 글자 써짐  */ /* ele와 this 같아서 어느거써도 나옴 */

        // 2. 좀비 넣기
        if(idx===9)
            $(ele).append('<img src="images/mz1.png" alt"좀비1" class="mz">'); /* append 추가 */
        if(idx===7)
            $(ele).append('<img src="images/mz2.png" alt"좀비2" class="mz">');

    }); ///////// each /////////////

    ////////////////////////////////////////////////////
    // 3. 버튼별 순서대로 클릭 이벤트 함수 만들기 /////////
    ////////////////////////////////////////////////////

    // 3-1. '들어가기' 버튼
    btns.first().click(function(){

        console.log("들어가기 버튼!");

        // 이동할 빌딩 li의 위치정보 알아내기!
        // offset() 메서드 위치나 크기정보를 알려줌
        // offset().top - top값
        // offset().left - left값

        // 이동할 li 타겟 -> bd변수에 할당(.building li)
        // let tg = bd.eq(); 
        /* 몇번째 0부터 : eq(순번) */




        // 미니언즈 이동하기
        // 대상 : .mi -> mi 변수에 할당!
        mi.animate({
            top: "500px", /* 속성:값, */
            left: "500px"
        }, 2000);

        /* 
            [ animate 메서드 ]
              animate({CSS설정},시간,이징,함수) 
            
              - CSS 설정에 따라, 애니메이션 연출 메서드
              - 시간 - 1/1000초 (단위없음)
              - 이징 - 가속도
              - 함수 - 애니후 실행코드 함수 (콜백함수)(뒤에서 호출한다해서 "콜백함수")
        */
        

    });////////////// 3-1 click //////////






















}); /////////////////////// jQB(제이쿼리 코드 블록) /////////////////////////////
///////////////////////////////////////////////////////////////////////////////